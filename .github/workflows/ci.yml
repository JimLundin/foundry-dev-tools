name: Foundry DevTools CI

on:
  push:
    tags-ignore: ['**']
    paths-ignore:
      - 'docs/**'
      - 'LICENSE'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.gitignore'
  pull_request:  # Run in every PR
    paths-ignore:
      - 'docs/**'
      - 'LICENSE'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/pull_request_template.md'
      - '.gitignore'
  workflow_dispatch:  # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: '0 0 1,16 * *'

concurrency:
  group: check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # always test both versions
      matrix:
        python:
        - "3.8"
        - "3.12"  # newest Python that is supported by pyspark
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 0}  # deep clone for hatch-vcs
      - uses: actions/setup-python@v4
        with: 
          python-version: ${{ matrix.python }}
      - name: Install hatch
        run: pip install --upgrade hatch
      - name: Run static analysis and format checkers
        run: hatch run test:lint
      - name: Run python tests
        run: hatch run test:unit

  # TODO: use hatch
  # publish:
  #   needs: test
  #   if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
  #         cache: "pip"
  #         cache-dependency-path: "pyproject.toml"
  #     - name: Retrieve pre-built distribution files
  #       uses: actions/download-artifact@v3
  #       with: {name: python-distribution-files, path: dist/}
  #     - name: Install Tox
  #       run: pip install tox
  #     - name: Publish Package
  #       env:
  #         TWINE_REPOSITORY: pypi
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  #       run: tox -e publish
